# Load necessary library
library(CovTools) 
library(lsbclust)
library(shapes)
library(ICtest)



# Step 1: Generate n random SPD (Symmetric Positive Definite) matrices


##For visualization purpose, samplecovs generates a 3d array of stacked
##sample covariances where - in 3rd dimension,
##the first half are sample covariances of samples generated
##independently from normal distribution with identity covariance,
##where the latter half consists of samples covariances
##from dense random population covariance.

generate_matrices <- function(n, dim) {
  sample_covs <- samplecovs(n,dim) # Compute sample covariance matrices
  return(sample_covs) # A 3D array of size (dim x dim x n)
}


### Another way to generate data (corr and Cov)

generate_matrices <- function(n,dim,mu,sig) {
  
  replicate(n, {
    
    U <- rorth(dim)
    D <- diag(exp(rnorm(dim,mu,sig)))
    S <- U%*%D%*%t(U)
    
    # diagS <- diag(S)
    # diag(1/sqrt(diagS))%*%S%*%diag(1/sqrt(diagS))
    
  })
  
}





# Step 2: Compute average squared distance using distcov
average_squared_distances <- function(matrices) {
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
         mean(sapply(1:n,
         function(j) if (i != j) distcov(matrices[, , i],
                                         matrices[, , j],
                                         method ='Euclidean')^2 else 0))
  })
}



# Step 3: Invert all generated matrices
invert_matrices <- function(matrices) {
  n <- dim(matrices)[3] # Number of matrices
  dim <- dim(matrices)[1] # Dimension of each matrix
  inverted_matrices <- array(0, dim = c(dim, dim, n)) # Create an empty 3D array
  for (i in 1:n) {
    inverted_matrices[, , i] <- solve(matrices[, , i]) # Invert each matrix
  }
  return(inverted_matrices)
}

# Step 4: Compute average squared distance for inverted matrices
average_squared_distances_inverted <- function(matrices) {
  iverted_matrices <- invert_matrices(matrices)
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
    mean(sapply(1:n, function(j) distcov(matrices[, , i], iverted_matrices[, , j],
                                         method ='Euclidean')^2))
  })
}


# Main function
main <- function(n, dim,mu,sig) {
  # Step 1: Generate sample covariance matrices
  matrices <- generate_matrices(n, dim,mu,sig)
  
  # Step 2: Compute average squared distance for original matrices
  avg_dist_original <- average_squared_distances(matrices)
  
  
  # Step 3: Compute average squared distance for inverted matrices
  avg_dist_inverted <- average_squared_distances_inverted(matrices)
  
  # Step 4: Compute the final average squared distance
  final_avg_distance <- mean((avg_dist_original - avg_dist_inverted)^2)/mean(avg_dist_original^2)
  
  # Return results
  return(list(
    avg_dist_original = avg_dist_original,
    avg_dist_inverted = avg_dist_inverted,
    final_avg_distance = final_avg_distance
  ))
}

# Example usage
set.seed(123) 
n <- 200  # Number of matrices
## or n <- c(20,50,200,500)
dim <- 3 
mu <- 2
sig <- 1



result <- c()
for (k in 1:length(n)) {
  
  result[k] <- main(n[k], dim,mu,sig)$final_avg_distance
}

# Print results
print(result)

