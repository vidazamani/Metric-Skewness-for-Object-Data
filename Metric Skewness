# Load necessary library
library(CovTools) 
library(lsbclust)
library(shapes)



# Step 1: Generate n random SPD matrices



generate_matrices <- function(n, dim) {
  sample_covs <- samplecovs(n,dim) # Compute sample covariance matrices
  return(sample_covs) # A 3D array of size (dim x dim x n)
}



# Step 2: Compute average squared distance using distcov
average_squared_distances <- function(matrices) {
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
    mean(sapply(1:n, function(j) if (i != j) distcov(matrices[, , i], matrices[, , j])^2 else NA), na.rm = TRUE)
  })
}



# Step 3: Invert all generated matrices
invert_matrices <- function(matrices) {
  n <- dim(matrices)[3] # Number of matrices
  dim <- dim(matrices)[1] # Dimension of each matrix
  inverted_matrices <- array(0, dim = c(dim, dim, n)) # Create an empty 3D array
  for (i in 1:n) {
    inverted_matrices[, , i] <- solve(matrices[, , i]) # Invert each matrix
  }
  return(inverted_matrices)
}

# Step 4: Compute average squared distance for inverted matrices
average_squared_distances_inverted <- function(matrices) {
  iverted_matrices <- invert_matrices(matrices)
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
    mean(sapply(1:n, function(j) if (i != j) distcov(matrices[, , i], iverted_matrices[, , j])^2 else NA), na.rm = TRUE)
  })
}


# Main function
main <- function(n, dim) {
  # Step 1: Generate sample covariance matrices
  matrices <- generate_matrices(n, dim)
  
  # Step 2: Compute average squared distance for original matrices
  avg_dist_original <- average_squared_distances(matrices)
  
  
  # Step 3: Compute average squared distance for inverted matrices
  avg_dist_inverted <- average_squared_distances_inverted(matrices)
  
  # Step 4: Compute the final average squared distance
  final_avg_distance <- mean((avg_dist_original - avg_dist_inverted)^2)
  
  # Return results
  return(list(
    avg_dist_original = avg_dist_original,
    avg_dist_inverted = avg_dist_inverted,
    final_avg_distance = final_avg_distance
  ))
}

# Example usage
set.seed(123) 
n <- 10  # Number of matrices
dim <- 3 

result <- main(n, dim)

# Print results
print(result)
