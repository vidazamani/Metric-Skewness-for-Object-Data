# Load necessary libraries
library(CovTools) 
library(lsbclust)
library(shapes)
library(ICtest)
library(ggplot2)
library(dplyr)
library(parallel)
library(purrr)



# Step 1: Generate n random SPD (Symmetric Positive Definite) matrices


##For visualization purpose, samplecovs generates a 3d array of stacked
##sample covariances where - in 3rd dimension,
##the first half are sample covariances of samples generated
##independently from normal distribution with identity covariance,
##where the latter half consists of samples covariances
##from dense random population covariance.


### This is one way 

# generate_matrices <- function(n, dim) {
#   sample_covs <- samplecovs(n,dim) # Compute sample covariance matrices
#   return(sample_covs) # A 3D array of size (dim x dim x n)
# }


### This is another way to generate data (corr and Cov)

generate_matrices <- function(n,dim,mu,sig) {
  
  replicate(n, {
    
    U <- rorth(dim)
    D <- diag(exp(rnorm(dim,mu,sig)))
    S <- U%*%D%*%t(U)
    
    ## if you want to generate corr matrices, then run the code lines below
    # diagS <- diag(S)
    # diag(1/sqrt(diagS))%*%S%*%diag(1/sqrt(diagS))
    
  })
  
}




# Step 2: Compute average squared distance using distcov
average_squared_distances <- function(matrices) {
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
    mean(sapply(1:n,
                function(j) if (i != j) distcov(matrices[, , i],
                                                matrices[, , j],
                                                method ='LogEuclidean')^2 else 0))
  })
}



# Step 3: Invert all generated matrices
invert_matrices <- function(matrices) {
  n <- dim(matrices)[3] # Number of matrices
  dim <- dim(matrices)[1] # Dimension of each matrix
  inverted_matrices <- array(0, dim = c(dim, dim, n)) # Create an empty 3D array
  for (i in 1:n) {
    inverted_matrices[, , i] <- solve(matrices[, , i]) # Invert each matrix
  }
  return(inverted_matrices)
}

# Step 4: Compute average squared distance for inverted matrices
average_squared_distances_inverted <- function(matrices) {
  iverted_matrices <- invert_matrices(matrices)
  n <- dim(matrices)[3]
  sapply(1:n, function(i) {
    mean(sapply(1:n, function(j) distcov(matrices[, , i], iverted_matrices[, , j],
                                         method ='LogEuclidean')^2))
  })
}



# Main function
main <- function(n, dim,mu,sig) {
  # Step 1: Generate sample covariance matrices
  matrices <- generate_matrices(n, dim,mu,sig)
  
  # Step 2: Compute average squared distance for original matrices
  avg_dist_original <- average_squared_distances(matrices)
  
  
  # Step 3: Compute average squared distance for inverted matrices
  avg_dist_inverted <- average_squared_distances_inverted(matrices)
  
  # Step 4: Compute the final average squared distance
  final_avg_distance <- mean((avg_dist_original - avg_dist_inverted)^2)/mean(avg_dist_original^2)
  
  # Return results
  return(list(
    avg_dist_original = avg_dist_original,
    avg_dist_inverted = avg_dist_inverted,
    Metric_skewness = final_avg_distance
  ))
}

# Example usage
set.seed(123) 
n <- c(50,100)   # Number of matrices
dim <- 2 
mu <- c(-12,-9,-6,-3,0,3,6,9,12)
mu <- seq(-12,12,0.2)

sig <- c(0.5,1,2)


# main(5,dim,mu,sig)


par_grid <- expand.grid(sample_size = n,
                        matrix_dimension = dim,
                        mean = mu,
                        sig = sig)


par_n <- nrow(par_grid)



start_time <- Sys.time()

iter = 1000
b_all <- matrix(0,length(n)*length(mu)*length(sig),iter)



cl <- makeCluster(4)
clusterExport(cl, ls(), envir = environment())
clusterExport(cl, c("rorth","abind", "CovDist",
                    "distcov"), envir = environment())


clusterEvalQ(cl, set.seed(2222))
set.seed(1111)
seed_vec <- sample(1:100000, iter)


for (j in 1:iter) {
  
  set.seed(seed_vec[j])
  
  skews <- parSapply(cl, 1:par_n, function(i) main(par_grid$sample_size[i],
                                                   par_grid$matrix_dimension[i],
                                                   par_grid$mean[i],
                                                   par_grid$sig[i])$Metric_skewness)
  
  
  b_all[,j] <- skews
  
  
}


stopCluster(cl)


endtime <- Sys.time()

howlong <- endtime - start_time

data <- data.frame(par_grid,b_all)

### To just obtain a dataset 
### which has an average of skewness measre over iterations
data1 <- data.frame(data,avg_skew = apply(data[c(5,6)], 1, mean))




#################### Visualization ##############################

pdf(file = 
      "C:/Users/vizama/Documents/2nd paper/pics/skewnessmatrix.pdf",  
    width = 15, # The width of the plot in inches
    height = 7) # The height of the plot in inches


# New facet label names for matrix dimension variable
mtd.labs <- c("n = 50", 'n = 100')
names(mtd.labs) <- c(50,100)

# New facet label names for sigma variable
otl.labs <- c("sigma = 0.5", "sigma = 1", 'sigma = 2')
names(otl.labs) <- c('0.5',"1", "2")


data4 <- data1 %>% group_by(sample_size,sig,mean) %>% 
  summarise(avg_skew = mean(avg_skew))


ggplot()+ 
  facet_grid(sig~.,
             labeller = labeller(sample_size = mtd.labs,
                                 sig = otl.labs))+
  geom_line(data = data4, aes(x = mean,
                              y = log(avg_skew),
                              color = factor(sample_size)),
            linewidth = 1)


ggplot()+ 
  facet_grid(sig~.,
             labeller = labeller(sample_size = mtd.labs,
                                 sig = otl.labs))+
  geom_line(data = data4, aes(x = mean,
                              y = avg_skew,
                              color = factor(sample_size)),
            linewidth = 1)


ggplot()+ 
  geom_line(data = data4, aes(x = mean,
                              y = log(avg_skew),
                              color = factor(sample_size),
                              linetype = factor(sig)),
            linewidth = 1)+ 
  theme_light()+
  labs(
    x = expression(mu) ,       
    y = "Log of Averaged Skewness",    
    color = "Smaple Size",
    linetype = expression(sigma)
  )


dev.off()
